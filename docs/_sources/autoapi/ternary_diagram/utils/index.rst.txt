:py:mod:`ternary_diagram.utils`
===============================

.. py:module:: ternary_diagram.utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ternary_diagram.utils.check_ax
   ternary_diagram.utils.check_2d_vector
   ternary_diagram.utils.check_1d_vector
   ternary_diagram.utils.three2two
   ternary_diagram.utils.get_label



.. py:function:: check_ax(ax: Optional[matplotlib.axes.Axes]) -> matplotlib.axes.Axes

   check ax

   :param ax:
   :type ax: None or Axes object

   :rtype: Axes object

   :raises TypeError:


.. py:function:: check_2d_vector(vector: numpy.typing.ArrayLike, scale: bool = True) -> numpy.ndarray

   check 2d vector

   :param vector: ratio
   :type vector: array | shape = (n, 3)
   :param scale: do minmaxscale or not, by default True
   :type scale: bool, optional

   :rtype: numpy.ndarray | shape = (n, 3)

   :raises ValueError: when shape is not (n, 3)


.. py:function:: check_1d_vector(vector: numpy.typing.ArrayLike, scale: bool = True) -> numpy.ndarray

   check 1d vector

   :param vector: [description]
   :type vector: [type]
   :param scale: [description], by default True
   :type scale: bool, optional

   .. rubric:: Examples

   >>> check_1d_vector([1, 2, 3], scale=False)
   array([[1, 2, 3]])

   >>> check_1d_vector([2, 2, 4], scale=True)
   array([[0.25, 0.25, 0.5 ]])

   :returns: 2d array

             shape is (1, 3)
   :rtype: np.ndarray


.. py:function:: three2two(vector: numpy.typing.ArrayLike) -> Tuple[numpy.ndarray, numpy.ndarray]

   Converted 3D proportions to 2D in order to generate a triangular diagram.

   :param vector: ratio
   :type vector: array | shape = (n, 3)

   .. rubric:: Examples

   >>> three2two(check_2d_vector([[2, 2, 4]]))
   (array([0.625]), array([0.21650635]))

   :rtype: numpy.ndarray shape = (n, 2)


.. py:function:: get_label(compound_name: str) -> str

   Convert the chemical composition to LaTeX notation.

   :param compound_name: A compound name, like 'Li2O'
   :type compound_name: str

   :returns: Chemical composition converted to LaTeX notation.
   :rtype: str

   .. rubric:: Examples

   >>> get_label('Li2O')
   'Li$_{2}$O'

   >>> get_label('(LiLa)0.5TiO3')
   '(LiLa)$_{0.5}$TiO$_{3}$'

   :raises ValueError: when `compound_name` is not str.


